module                  ->  "MODULE" IDENT ";" declarations "BEGIN" statementSequence "END" IDENT "."

identList               ->  IDENT ("," IDENT)*

declarations            ->  ("CONST" IDENT "=" expression ";" (IDENT "=" expression ";")*)?
                            ("TYPE" IDENT "=" type ";" (IDENT "=" type ";")*)?
                            ("VAR" identList ":" type ";" (identList ":" type ";")*)?
                            ((procedureDeclaration | functionDeclaration) ";")*

statementSequence       ->  (statement ";")*

expression              ->  simpleExpression (("="|"#"|"<"|"<="|">"|">=")simpleExpression)?

type                    ->  IDENT | arrayType | recordType

procedureDeclaration    ->  procedureHeading ";" subroutineBody

functionDeclaration     ->  functionHeading ';' subroutineBody

statement               ->  assignment|call|ifStatement|whileStatement|returnStatement

simpleExpression        ->  ("+"|"-") term (("+"|"-"|"OR")term)*

arrayType               ->  "ARRAY" expression "OF" type

recordType              ->  "RECORD" (fieldList)* "END"

procedureHeading        ->  "PROCEDURE" IDENT formalParameters

subroutineBody          ->  ("VAR" identList ":" type ";" (identList ":" type ";")*)?
                            "BEGIN" statementSequence "END" IDENT

functionHeading         ->  "FUNCTION"  IDENT formalParameters ":" type

assignment              ->  IDENT selector ":=" expression

call                    ->  IDENT actualParameters

ifStatement             ->  "IF" expression "THEN" statementSequence ("ELSE" statementSequence)? "END"

whileStatement          ->  "WHILE" expression  "DO" statementSequence "END"

returnStatement         ->  "RETURN" expression?

term                    ->  factor (("*"|"DIV"|"MOD"|"&")factor)*

factor                  ->  IDENT selector | INTEGER | "(" expression ")" | "~" factor

selector                ->  ("." IDENT | "[" expression "]")*

fieldList               ->  identList ":" type

formalParameters        ->  "(" ("VAR" identList ":" type ";" (identList ":" type ";")*)? ")"

actualParameters        -> "("(expression ("," expression)*)?")"